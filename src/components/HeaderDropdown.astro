---
import { Separator } from "./ui/separator";

export interface Props {
    name: string;
    href?: string;
    submenu?: { name: string; href: string }[];
    currentPath: string;
}

const { name, href, submenu, currentPath } = Astro.props;
const isActive = submenu?.some((item) => currentPath.startsWith(item.href));
---

<div class="relative group" id="dropdown-container">
    <button
        class={`px-3 py-[7px] text-sm font-medium ${
            isActive
                ? "bg-[#ECECEC] text-[#111] "
                : "bg-[#f5f5f5] text-[#111]"
        }`}
    >
        {name}
    </button>
    {
        submenu && (
            <div
                id="dropdown-menu"
                class="absolute left-0 w-48 bg-[#f8f8f8] ring-1 ring-black ring-opacity-5 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition ease-out duration-100 z-50"
            >
                <div
                    class="py-1"
                    role="menu"
                    aria-orientation="vertical"
                    aria-labelledby="options-menu"
                >
                    {submenu.map((item) => (
                        <>
                            <Separator className="bg-neutral-100" />
                            <a
                                href={item.href}
                                class={`block px-4 py-2 text-sm ${
                                    currentPath.startsWith(item.href)
                                        ? "bg-neutral-100 text-neutral-900"
                                        : "text-neutral-700 hover:bg-neutral-100 hover:text-neutral-900"
                                }`}
                                role="menuitem"
                            >
                                {item.name}
                            </a>
                            <Separator className="bg-neutral-100" />
                        </>
                    ))}
                </div>
            </div>
        )
    }
</div>

<script>
    function setupDropdown() {
        const container = document.getElementById("dropdown-container");
        const menu = document.getElementById("dropdown-menu");
        let timeoutId: ReturnType<typeof setTimeout> | null = null;

        if (container && menu) {
            container.addEventListener("mouseenter", () => {
                if (timeoutId) clearTimeout(timeoutId);
                menu.classList.add("opacity-100", "visible");
            });

            container.addEventListener("mouseleave", () => {
                timeoutId = setTimeout(() => {
                    menu.classList.remove("opacity-100", "visible");
                }, 1000);
            });
        }
    }

    setupDropdown();
    document.addEventListener("astro:after-swap", setupDropdown);
</script>
